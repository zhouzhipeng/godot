<?xml version="1.0" encoding="UTF-8" ?>
<class name="PhysicsBody2D" inherits="CollisionObject2D" version="4.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		Base class for all objects affected by physics in 2D space.
	</brief_description>
	<description>
		PhysicsBody2D is an abstract base class for implementing a physics body. All *Body2D types inherit from it.
	</description>
	<tutorials>
		<link title="Physics introduction">$DOCS_URL/tutorials/physics/physics_introduction.html</link>
	</tutorials>
	<methods>
		<method name="add_collision_exception_with">
			<return type="void" />
			<param index="0" name="body" type="Node" />
			<description>
				Adds a body to the list of bodies that this body can't collide with.
			</description>
		</method>
		<method name="get_collision_exceptions">
			<return type="PhysicsBody2D[]" />
			<description>
				Returns an array of nodes that were added as collision exceptions for this body.
			</description>
		</method>
		<method name="move_and_collide">
			<return type="KinematicCollision2D" />
			<param index="0" name="distance" type="Vector2" />
			<param index="1" name="test_only" type="bool" default="false" />
			<param index="2" name="safe_margin" type="float" default="0.08" />
			<description>
				Moves the body along the vector [code]distance[/code]. In order to be frame rate independent in [method Node._physics_process] or [method Node._process], [code]distance[/code] should be computed using [code]delta[/code].
				Returns a [KinematicCollision2D], which contains information about the collision when stopped, or when touching another body along the motion.
				If [code]test_only[/code] is [code]true[/code], the body does not move but the would-be collision information is given.
				[code]safe_margin[/code] is the extra margin used for collision recovery (see [member CharacterBody2D.collision/safe_margin] for more details).
			</description>
		</method>
		<method name="remove_collision_exception_with">
			<return type="void" />
			<param index="0" name="body" type="Node" />
			<description>
				Removes a body from the list of bodies that this body can't collide with.
			</description>
		</method>
		<method name="test_move">
			<return type="bool" />
			<param index="0" name="from" type="Transform2D" />
			<param index="1" name="distance" type="Vector2" />
			<param index="2" name="collision" type="KinematicCollision2D" default="null" />
			<param index="3" name="safe_margin" type="float" default="0.08" />
			<description>
				Checks for collisions without moving the body. In order to be frame rate independent in [method Node._physics_process] or [method Node._process], [code]distance[/code] should be computed using [code]delta[/code].
				Virtually sets the node's position, scale and rotation to that of the given [Transform2D], then tries to move the body along the vector [code]distance[/code]. Returns [code]true[/code] if a collision would stop the body from moving along the whole path.
				[code]collision[/code] is an optional object of type [KinematicCollision2D], which contains additional information about the collision when stopped, or when touching another body along the motion.
				[code]safe_margin[/code] is the extra margin used for collision recovery (see [member CharacterBody2D.collision/safe_margin] for more details).
			</description>
		</method>
	</methods>
	<members>
		<member name="input_pickable" type="bool" setter="set_pickable" getter="is_pickable" overrides="CollisionObject2D" default="false" />
	</members>
</class>
